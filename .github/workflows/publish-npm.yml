name: Publish Package to npmjs

on:
  push: # REMOVE IN PROD
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      - run: npm install

      # Check for typosquatting
      - name: Checking typosquatting patterns of $PACKAGE_NAME
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name.replace('@nautilus-wraith/', '')")
          echo "🔍 Checking typosquatting patterns of $PACKAGE_NAME"
          echo "----------------------------------------"

          # Common typosquatting patterns with descriptions
          declare -A PATTERNS=(
            ["${PACKAGE_NAME//-/_}"]="Hyphen to underscore"
            ["${PACKAGE_NAME//_/-}"]="Underscore to hyphen"
            ["${PACKAGE_NAME}js"]="Added 'js' suffix"
            ["js-${PACKAGE_NAME}"]="Added 'js-' prefix"
            ["node-${PACKAGE_NAME}"]="Added 'node-' prefix"
            ["${PACKAGE_NAME//a/4}"]="Replaced 'a' with '4'"
            ["${PACKAGE_NAME//e/3}"]="Replaced 'e' with '3'"
            ["${PACKAGE_NAME//i/1}"]="Replaced 'i' with '1'"
            ["${PACKAGE_NAME//o/0}"]="Replaced 'o' with '0'"
            ["${PACKAGE_NAME//s/5}"]="Replaced 's' with '5'"
            ["${PACKAGE_NAME//t/7}"]="Replaced 't' with '7'"
          )

          FOUND_SQUATTERS=false
          echo "📦 Found packages with similar names to $PACKAGE_NAME"
          echo "----------------------------------------"

          for pattern in "${!PATTERNS[@]}"; do
            if npm view "$pattern" &>/dev/null; then
              FOUND_SQUATTERS=true
              VERSION=$(npm view "$pattern" version 2>/dev/null || echo "unknown")
              TIME=$(npm view "$pattern" time.modified 2>/dev/null || echo "unknown")
              AUTHOR=$(npm view "$pattern" author 2>/dev/null || echo "unknown")
              echo "⚠️ Package: $pattern" ⚠️
              echo "Pattern: ${PATTERNS[$pattern]}"
              echo "Version: $VERSION"
              echo "Last Updated: $TIME"
              echo "Author: $AUTHOR"
              echo "URL: https://www.npmjs.com/package/$pattern"
              echo "----------------------------------------"
            fi
          done

          if [ "$FOUND_SQUATTERS" = true ]; then
            echo "::warning::Potential typosquatters detected (see the workflow logs). Consider registering these names to protect your package."
            echo "TYPOSQUATTERS_FOUND=true" >> $GITHUB_ENV
          else
            echo "✅ No typosquatters found."
            echo "TYPOSQUATTERS_FOUND=false" >> $GITHUB_ENV
          fi

      # Check if unscoped package name is available
      - name: Check package name availability
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name.replace('@nautilus-wraith/', '')")
          if npm view $PACKAGE_NAME &>/dev/null; then
            echo "Global package name $PACKAGE_NAME is already taken. Publishing only scoped version."
            echo "PACKAGE_TAKEN=true" >> $GITHUB_ENV
            echo "::error::Global package name $PACKAGE_NAME is already taken. Exiting workflow."
            # exit 1 # REMOVE IN PROD
          else
            echo "Global package name $PACKAGE_NAME is available."
            echo "PACKAGE_TAKEN=false" >> $GITHUB_ENV
          fi

  publish:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Provenance generation in GitHub Actions requires "write" access to the "id-token" permission
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      - run: npm install

      # Publish scoped version
      - name: Publish scoped package
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publish unscoped version if available
      - name: Publish unscoped package as well if not taken
        if: needs.validate.outputs.PACKAGE_TAKEN == 'false'
        run: |
          # Temporarily modify package.json to remove scope
          PACKAGE_NAME=$(node -p "require('./package.json').name.replace('@nautilus-wraith/', '')")
          npm pkg set name=$PACKAGE_NAME
          npm publish --provenance --access public
          # Restore original package.json
          git checkout package.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}